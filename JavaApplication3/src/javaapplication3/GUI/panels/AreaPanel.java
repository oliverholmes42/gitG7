/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package javaapplication3.GUI.panels;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javaapplication3.models.Area;
import javaapplication3.models.agentSubClass.Områdeschef;
import javaapplication3.utils.ObjectManager;
import static javaapplication3.utils.ObjectManager.db;
import javaapplication3.utils.UserSession;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfException;

/**
 *
 * @author aiham
 */
public class AreaPanel extends javax.swing.JPanel {

    public static DefaultTableModel areaTableModel;

    /**
     * Creates new form OmradePanel
     */
    public AreaPanel() throws NumberFormatException, InfException {
        initComponents();
        
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Perform long-running data loading tasks here
                ObjectManager.Areas.loadList();
                return null;
            }

            @Override
            protected void done() {
                try {
                    areaTableModel = (DefaultTableModel) areaTable.getModel();
                    loadTable();
                    addListener();
                } catch (InfException ex) {
                    Logger.getLogger(AreaPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        worker.execute();

 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaTable = new javax.swing.JTable();
        searchOmradeTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        viewBoss = new javax.swing.JButton();

        setBackground(new java.awt.Color(200, 200, 200));
        setPreferredSize(new java.awt.Dimension(1128, 792));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Område");

        areaTable.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        areaTable.setForeground(new java.awt.Color(40, 40, 40));
        areaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Namn på område", "Antal agenter", "Antal Aliens"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        areaTable.setAlignmentX(1.5F);
        areaTable.setAlignmentY(1.5F);
        areaTable.setName(""); // NOI18N
        areaTable.setRowHeight(80);
        areaTable.setRowMargin(1);
        areaTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        areaTable.setShowGrid(true);
        jScrollPane2.setViewportView(areaTable);

        searchOmradeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchOmradeTextFieldActionPerformed(evt);
            }
        });

        jButton1.setText("Sök");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        viewBoss.setText("Se områdeschef");
        viewBoss.setEnabled(false);
        viewBoss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBossActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(searchOmradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(467, 467, 467)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(199, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(viewBoss, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(216, 216, 216))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchOmradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewBoss, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(145, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchOmradeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchOmradeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchOmradeTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        areaTableModel.setRowCount(0);
        for (Area i : ObjectManager.Areas.areaList.values()) {
            String search = searchOmradeTextField.getText().toLowerCase();

            boolean searchMatch = i.getName().toLowerCase().contains(search);
            if (searchMatch) {
                try {
                    addRow(i);
                } catch (InfException ex) {
                    Logger.getLogger(AreaPanel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "An error occurred during the removal process.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void viewBossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBossActionPerformed
        try {
            int row = areaTable.getSelectedRow();
            int id = Integer.parseInt(areaTable.getValueAt(row, 0).toString());
            Områdeschef chef = ObjectManager.Agents.findOmradeschefForArea(id);
            Area area = ObjectManager.Areas.areaList.get(id);
            if (chef != null) {
                JOptionPane.showMessageDialog(this,area.getName() + "\n" + "Områdeschef: " + chef.getName(), "Info", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No Områdeschef found for the selected area.", "Info", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            Logger.getLogger(AreaPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InfException ex) {
            Logger.getLogger(AreaPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewBossActionPerformed
    
   private void addListener() {
       areaTable.addMouseListener(new MouseAdapter() {
           @Override
           public void mouseClicked(MouseEvent e) {
               if (e.getClickCount() == 1) { // Single click
                   int[] rows = areaTable.getSelectedRows();

                   if (rows.length == 1) {
                       viewBoss.setEnabled(true);
                   } else {
                       viewBoss.setEnabled(false);
                   }

               }
           }
       });
     
    }
    private static void loadTable() throws InfException {
        areaTableModel.setRowCount(0);
        for (Area i : ObjectManager.Areas.areaList.values()) {
            addRow(i);
        }
    }
    
    public static void reload() throws InfException{
        loadTable();
    }

    private static void addRow(Area i) throws InfException {
        String[] row = {
            Integer.toString(i.getId()),
            i.getName(),
            db.fetchSingle("SELECT COUNT(Agent_ID) FROM agent WHERE Omrade = " + i.getId()),
            db.fetchSingle("SELECT count(DISTINCT Alien_ID) FROM alien JOIN plats ON alien.Plats = plats.Plats_ID join omrade on plats.Finns_I =" + i.getId())
        };
        areaTableModel.addRow(row);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable areaTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField searchOmradeTextField;
    private javax.swing.JButton viewBoss;
    // End of variables declaration//GEN-END:variables
}
